{"version":3,"sources":["AtomsCell.js","AtomsBoard.js","App.js","serviceWorker.js","index.js"],"names":["AtomsCell","this","props","onClick","line","column","className","color","value","clicked","bind","React","Component","AtomsBoard","state","currentPlayer","allPlayersPlayed","gameOver","winner","cells","Array","from","_","popping","status","map","cellsRow","key","cell","cellClicked","setState","row","rowIndex","colIndex","updatedCell","forEach","neighbors","getNeighbors","length","console","log","popCell","numberOfBlueCells","reduce","count","filter","numberOfRedCells","newCell","setTimeout","executePop","Math","random","JSON","parse","stringify","neighborCell","self","push","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.56ee3ae6.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class AtomsCell extends React.Component {\n\n  clicked() {\n    this.props.onClick(\n      this.props.line,\n      this.props.column\n    );\n  }\n\n  render() {\n    return (\n      <button \n        className={`cell ${this.props.color} ${this.props.color}-${this.props.value}`} \n        onClick={this.clicked.bind(this)}>\n      </button>\n    );\n  }\n}","import React from 'react';\nimport AtomsCell from './AtomsCell';\n\nconst LINES = 6;\nconst COLUMNS = 10;\nconst COLOR_BLUE = \"blue\";\nconst COLOR_RED = \"red\";\n\nexport default class AtomsBoard extends React.Component {\n\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      currentPlayer: COLOR_BLUE,\n      allPlayersPlayed: false,\n      gameOver: false,\n      winner: null,\n      cells: Array.from(\n        Array(LINES), \n        (_, line) => Array.from(\n          new Array(COLUMNS), \n          (_, column) => { \n            return {\n              line: line,\n              column: column,\n              color: null,\n              value: 0,\n              popping: false\n            };\n          }\n        )\n      )\n    };\n  }\n\n  render() {\n    const status = this.state.gameOver ? 'Game over' : ('Next player: ' + this.state.currentPlayer);\n  \n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n        {this.state.cells.map((cellsRow, line) => {\n          return <div key={\"row\" + line} className=\"board-row\">\n            {cellsRow.map((cell, column) => {\n              return <AtomsCell \n                key={\"cell\" + line + \",\" + column}\n                line={line}\n                column={column}\n                value={cell.value}\n                color={cell.color}\n                onClick={this.cellClicked.bind(this)}\n              ></AtomsCell>\n            })}\n          </div>;\n        })}\n      </div>\n    );\n  }\n\n  cellClicked(line, column) {\n    let cell = this.state.cells[line][column];\n\n    // Prevent invalid clicks\n    if (this.state.gameOver) {\n      return;\n    }\n    if (cell.color !== null && cell.color !== this.state.currentPlayer) {\n      return;\n    }\n\n    this.setState(state => ({\n      currentPlayer: this.state.currentPlayer === COLOR_BLUE ? COLOR_RED : COLOR_BLUE,\n      allPlayersPlayed: this.state.allPlayersPlayed || this.state.currentPlayer === COLOR_RED,\n      cells: state.cells.map((row, rowIndex) => \n        row.map((cell, colIndex) => {\n          if (rowIndex === line && colIndex === column) {\n            var updatedCell = {...cell}; \n            updatedCell.value = cell.value + 1;\n            updatedCell.color = state.currentPlayer;\n            return updatedCell;\n          } else {\n            return cell;\n          }\n        })\n      )\n    }));\n  }\n\n  componentDidUpdate() {\n    // Pop overloaded cells\n    this.state.cells.forEach((cellsRow, line) => {\n      cellsRow.forEach((cell, column) => {\n        let neighbors = this.getNeighbors(line, column);\n        if ((!cell.popping) && (cell.value >= neighbors.length)) {\n          console.log(\"Pop!\");\n          this.popCell(line, column);\n        }\n      });\n    });\n\n    // Detect end of game\n    if (this.state.gameOver || !this.state.allPlayersPlayed) {\n      return;\n    }\n\n    let numberOfBlueCells = this.state.cells.reduce((count, row) => {\n      return count + row.filter(cell => cell.color === COLOR_BLUE).length\n    }, 0);\n    let numberOfRedCells = this.state.cells.reduce((count, row) => {\n      return count + row.filter(cell => cell.color === COLOR_RED).length\n    }, 0);\n    console.log(numberOfBlueCells + \" blue cells, \" + numberOfRedCells + \" red cells\");\n    if (numberOfBlueCells && !numberOfRedCells) {\n      this.setState({\n        gameOver: true,\n        winner: COLOR_BLUE\n      });\n    }\n    if (numberOfRedCells && !numberOfBlueCells) {\n      this.setState({\n        gameOver: true,\n        winner: COLOR_RED\n      });\n    }\n  }\n  \n  popCell(line, column) {\n    // Allow max. 1 simultaneous pop per cell\n    this.setState(\n      state => ({\n        cells: state.cells.map(row => \n          row.map(cell => {\n            if (cell.line === line && cell.column === column) {\n              let newCell = {...cell};\n              newCell.popping = true;\n              return newCell; \n            }\n            return cell;\n          })\n        )\n      })\n    );\n\n    setTimeout(() => {\n      this.executePop(line, column);\n    }, 350 + Math.random() * 300);\n  }\n\n  executePop(line, column) {\n    this.setState(state => {\n      let cells = JSON.parse(JSON.stringify(state.cells));\n      let cell = cells[line][column];\n      let neighbors = this.getNeighbors(line, column, cells);\n      \n      neighbors.forEach(neighborCell => {\n        neighborCell.value = neighborCell.value + 1;\n        neighborCell.color = cell.color;\n      });\n\n      cell.value = cell.value - neighbors.length;\n      if (cell.value === 0) {\n        cell.color = null;\n      }\n      cell.popping = false;\n\n      return {cells: cells};\n    });\n  }\n\n  popCellBefore(line, column) {\n    let cell = this.state.cells[line][column];\n    let neighbors = this.getNeighbors(line, column);\n\n    if ((!cell.popping) \n        && cell.value >= neighbors.length) {\n      this.setState({popping: true})\n      let self = this; \n      setTimeout(function () {\n        self.setState(state => { \n          return {\n            popping: false,\n            count: state.count - neighbors.length\n          };\n        })\n        neighbors.forEach(neighborCell => {\n          neighborCell.setState(state => {\n            return {\n             count: state.count + 1\n            }\n          })\n        });\n      }, 350);\n    }\n  }\n\n  getNeighbors(line, column, cells = this.state.cells) {\n    var neighbors = []\n    if (line > 0) {\n      neighbors.push(cells[line - 1][column])\n    }\n    if (column > 0) {\n      neighbors.push(cells[line][column - 1])\n    }\n    if (line + 1 < LINES) {\n      neighbors.push(cells[line + 1][column])\n    }\n    if (column + 1 < COLUMNS) {\n      neighbors.push(cells[line][column + 1])\n    }\n    return neighbors;\n  }\n}\n  ","import React from 'react';\nimport './App.css';\nimport AtomsBoard from './AtomsBoard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AtomsBoard></AtomsBoard>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}